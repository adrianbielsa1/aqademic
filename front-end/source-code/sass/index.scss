$dark-orange: #ff6200;
$light-orange: #fd9346;
$dark-grey: #353b48;
$light-grey: #d3d3d3;
$bright-white: #ffffff;

$primary-color: $dark-grey;
$secondary-color: $light-orange; // $light-grey;
$divisor-color: $dark-orange; // $bright-white;
$highlight-color: $bright-white;

$primary-text-color: $light-orange; // $light-grey;
$secondary-text-color: $dark-grey;

// Mainly used to center a div's content.
@mixin flex-single-center {
    display: flex;

    // Horizontal and vertical alignment, respectively.
    justify-content: center;
    align-items: center;
}

// Same as `flex-single-center`, but also wraps the contents in the specified
// direction.
@mixin flex-wrap-center($direction: row) {
    @include flex-single-center;

    // Behavior when there are too many items.
    flex-flow: $direction wrap;
    align-content: center;
}

// Creates a grid.
@mixin grid-parent($rows, $columns) {
    display: grid;
    grid-template-rows: $rows;
    grid-template-columns: $columns;
}

// Selects a cell of the parent's grid.
@mixin grid-child($row, $column) {
    grid-row: $row;
    grid-column: $column;
}

// Automatically sets the given `properties` to `inherit`. You can use it
// in a container's element to inherit some of the container's properties.
@mixin inheritance($properties) {
    @each $property in $properties {
        #{$property}: inherit;
    }
}

.page {
    @include grid-parent(8rem 4px 1fr 4px 6rem, 100%);

    // Ignore the default margins.
    position: absolute;
    left: 0px;
    top: 0px;

    // Resize to fit the whole viewport.
    width: 100vw;
    height: 100vh;

    // Default font style for the whole page.
    font-weight: bold;
    font-family: Helvetica;
    font-size: 1em;
    color: $primary-text-color;
}

.divisor {
    background-color: $divisor-color;
}

.header {
    @include grid-child(1, 1);
    @include grid-parent(100%, 70% 30%);

    background-color: $primary-color;
}

.header > .title {
    @include flex-single-center;
    @include grid-child(1, 1);

    // Overrides.
    justify-content: flex-start;
    font-size: 4rem;

    margin-left: 3rem;
}

// TODO: The layout breaks if more items are added to the navigation bar.
.header > .navigation {
    @include flex-single-center;
    @include grid-child(1, 2);

    // Overrides.
    justify-content: flex-end;
    font-size: 2rem;

    color: $primary-text-color;

    // Disable links' decoration.
    text-decoration: none;

    margin-right: 3rem;
}

.header > .navigation > .login {
    @include inheritance(font-size color text-decoration);
}

.header > .navigation > .login:hover {
    color: $highlight-color;
}

.search {
    // TODO: Why do I need the first "margin" to be half the last one for them
    // to be of the same visual size?
    @include grid-parent(1rem 5rem 1fr 2rem, 5rem 1fr 5rem);
    @include grid-child(3, 1);

    background-color: $secondary-color;
}

.search > .query {
    @include grid-parent(3rem 2rem, 20% 1fr 20%);
    @include grid-child(2, 2);

    background-color: $secondary-color;
}

.search > .query > .tip {
    @include flex-single-center;
    @include grid-child(1, 2);

    font-size: 1.25rem;
    color: $secondary-text-color;

    // Disable automatic line breaks when the page gets too small.
    white-space: nowrap;
}

.search > .query > .bar {
    @include grid-parent(100%, 0.5rem 1fr 0.5rem 2rem);
    @include grid-child(2, 2);

    background-color: $primary-color;
    border-radius: 0.5rem;
}

.search > .query > .bar > .input {
    @include grid-child(1, 2);

    color: $primary-text-color;

    // Disable input's border, outline, and default background.
    background-color: transparent;
    border-color: transparent;
    outline-color: transparent;
    outline: 0;
}

.search > .query > .bar > .button {
    @include flex-single-center;
    @include grid-child(1, 4);

    background-color: $highlight-color;
    color: $secondary-text-color;

    border-top-right-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
}

.search > .result {
    @include grid-parent(3rem 1fr, 8% 1fr 8%);
    @include grid-child(3, 2);

    background-color: $secondary-color;
}

.search > .result > .tip {
    @include flex-single-center;
    @include grid-child(1, 2);

    font-size: 1.25rem;
    color: $secondary-text-color;

    // Disable automatic line breaks when the page gets too small.
    // NOTE: This will break the layout once this behavior kicks in, which
    // should be resolved using media queries.
    white-space: nowrap;
}

.search > .result > .list {
    @include grid-child(2, 2);

    background-color: $primary-color;
    border-radius: 0.5rem;
}

.footer {
    @include grid-child(5, 1);

    background-color: $primary-color;
}
