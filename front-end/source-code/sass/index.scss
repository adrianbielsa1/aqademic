@use "sass:map";

$colors: (
    // Common color variants.
    "grey": grey,
    "white": white,

    // Dark color variants.
    "dark-grey": #353b48,
    "dark-orange": #ff6200,

    // Light color variants.
    "light-grey": #d3d3d3,
    "light-orange": #fd9346,
);

$orangey-palette: (
    "primary": map.get($colors, "dark-grey"),
    "secondary": map.get($colors, "light-orange"),

    "primary-text": map.get($colors, "light-grey"),
    "secondary-text": map.get($colors, "dark-grey"),

    "divisor": map.get($colors, "dark-orange"),
    "highlight": map.get($colors, "white"),
);

$greyish-palette: (
    "primary": map.get($colors, "dark-grey"),
    "secondary": map.get($colors, "light-grey"),

    "primary-text": map.get($colors, "light-grey"),
    "secondary-text": map.get($colors, "dark-grey"),

    "divisor": map.get($colors, "grey"),
    "highlight": map.get($colors, "white"),
);

$current-palette: $orangey-palette;

// Mainly used to center a div's content.
@mixin flex-single-center {
    display: flex;

    // Horizontal and vertical alignment, respectively.
    justify-content: center;
    align-items: center;
}

// Same as `flex-single-center`, but also wraps the contents in the specified
// direction.
@mixin flex-wrap-center($direction: row) {
    @include flex-single-center;

    // Behavior when there are too many items.
    flex-flow: $direction wrap;
    align-content: center;
}

// Creates a grid.
@mixin grid-parent($rows, $columns) {
    display: grid;
    grid-template-rows: $rows;
    grid-template-columns: $columns;
}

// Selects a cell of the parent's grid.
@mixin grid-child($row, $column) {
    grid-row: $row;
    grid-column: $column;
}

// Automatically sets the given `properties` to `inherit`. You can use it
// in a container's element to inherit some of the container's properties.
@mixin inheritance($properties) {
    @each $property in $properties {
        #{$property}: inherit;
    }
}

.page {
    @include grid-parent(8rem 4px 1fr 4px 6rem, 100%);

    // Ignore the default margins.
    position: absolute;
    left: 0px;
    top: 0px;

    // Resize to fit the whole viewport.
    width: 100%;
    height: 100%;

    // Default font style for the whole page.
    font-weight: bold;
    font-family: Helvetica;
    font-size: 1em;
    color: map.get($current-palette, "primary-text");
}

.divisor {
    background-color: map.get($current-palette, "divisor");
}

.header {
    @include grid-child(1, 1);
    @include grid-parent(100%, 70% 30%);

    background-color: map.get($current-palette, "primary");
}

.header > .title {
    @include flex-single-center;
    @include grid-child(1, 1);

    // Overrides.
    justify-content: flex-start;
    font-size: 4rem;

    margin-left: 3rem;
}

// TODO: The layout breaks if more items are added to the navigation bar.
.header > .navigation {
    @include flex-single-center;
    @include grid-child(1, 2);

    // Overrides.
    justify-content: flex-end;
    font-size: 2rem;

    color: map.get($current-palette, "primary-text");

    // Disable links' decoration.
    text-decoration: none;

    margin-right: 3rem;
}

.header > .navigation > .login {
    @include inheritance(font-size color text-decoration);
}

.header > .navigation > .login:hover {
    color: map.get($current-palette, "highlight");
}

.search {
    // TODO: Why do I need the first "margin" to be half the last one for them
    // to be of the same visual size?
    @include grid-parent(1rem 5rem 1fr 2rem, 1fr);
    @include grid-child(3, 1);

    background-color: map.get($current-palette, "secondary");
}

.search > .query {
    @include grid-parent(3rem 2rem, 0.3fr 1fr 0.3fr);
    @include grid-child(2, 1);

    background-color: map.get($current-palette, "secondary");
}

.search > .query > .tip {
    @include flex-single-center;
    @include grid-child(1, 2);

    font-size: 1.25rem;
    color: map.get($current-palette, "secondary-text");

    // Disable automatic line breaks when the page gets too small.
    white-space: nowrap;
}

.search > .query > .bar {
    @include grid-parent(100%, 2rem 0.5rem 1fr 0.5rem);
    @include grid-child(2, 2);

    background-color: map.get($current-palette, "primary");
    border-radius: 0.5rem;
}

.search > .query > .bar > .input {
    @include grid-child(1, 3);

    color: map.get($current-palette, "highlight");

    // Disable input's border, outline, and default background.
    background-color: transparent;
    border-color: transparent;
    outline-color: transparent;
    outline: 0;
}

.search > .query > .bar > .button {
    @include flex-single-center;
    @include grid-child(1, 1);

    background-color: map.get($current-palette, "highlight");
    color: map.get($current-palette, "secondary-text");

    border-top-left-radius: 0.5rem;
    border-bottom-left-radius: 0.5rem;
}

.search > .result {
    @include grid-parent(3rem 1fr, 0.05fr 1fr 0.05fr);
    @include grid-child(3, 1);

    background-color: map.get($current-palette, "secondary");
}

.search > .result > .tip {
    @include flex-single-center;
    @include grid-child(1, 2);

    font-size: 1.25rem;
    color: map.get($current-palette, "secondary-text");

    // Disable automatic line breaks when the page gets too small.
    // NOTE: This will break the layout once this behavior kicks in, which
    // should be resolved using media queries.
    white-space: nowrap;
}

.search > .result > .list {
    // This will create as many rows as necessary.
    @include grid-parent(auto, repeat(auto-fill, 14rem));
    @include grid-child(2, 2);

    // Element related styles.

    padding: 1.5rem;

    background-color: map.get($current-palette, "primary");
    border-radius: 1rem;

    // Children related styles.

    // Minimum distance between each cell.
    grid-gap: 1rem;

    justify-content: space-around;
    align-content: flex-start;
}

.search > .result > .list > .item {
    @include flex-wrap-center;

    font-weight: normal;
    color: map.get($current-palette, "secondary-text");

    border-color: map.get($current-palette, "divisor");
    border-style: solid;
    border-width: thin;
    border-radius: 1rem;

    background-color: map.get($current-palette, "secondary");

    padding: 0.5rem;
}

.search > .result > .list > .item:hover {
    $shadow-color: map.get($current-palette, "divisor");

    -moz-box-shadow: inset 0 0 1rem $shadow-color;
    -webkit-box-shadow: inset 0 0 1rem $shadow-color;

    box-shadow: inset 0 0 1rem $shadow-color;

    transform: scale(1.05);
}

.footer {
    @include flex-single-center;
    @include grid-child(5, 1);

    // Overrides.
    justify-content: space-around;

    background-color: map.get($current-palette, "primary");
}

// Targets all `img` DOM elements that are inside the `footer`.
.footer > img {
    transition: transform .4s;
}

.footer > img:hover {
    transform: rotate(15deg);
}

// For small, portrait-like resolutions.
@media screen and (max-width: 600px) {
    .header {
        @include grid-parent(60% 40%, 100%);
    }

    .header > .title {
        @include flex-single-center;
        @include grid-child(1, 1);

        margin-left: 0rem;
    }

    .header > .navigation {
        @include flex-single-center;
        @include grid-child(2, 1);

        margin-right: 0rem;
    }
}
